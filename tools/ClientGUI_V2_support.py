#! /usr/bin/env python
#
# Support module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Feb 24, 2018 06:27:58 PM
#    Apr 23, 2018 08:54:50 PM


import sys
import subprocess
import threading
import platform
import os
from datetime import timedelta
from contextlib import suppress


from tools.fish import ScenePlanner, TrackerFeeder, Tracking, Controller

# from . import track_fish

thread_track_fish = []

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def set_Tk_var():
    global FeedVar1
    FeedVar1 = tk.StringVar()
    global FeedVar2
    FeedVar2 = tk.StringVar()
    global TrainingVar
    TrainingVar = tk.StringVar()
    global chb_Var
    chb_Var = tk.StringVar()
    global CamVar1
    CamVar1 = tk.StringVar()
    global chVar_stop_tr
    chVar_stop_tr = tk.IntVar()
    global txtTrainingStop
    txtTrainingStop = tk.StringVar()


def R_Cam1Sel():
    global CamVar1
    print('ClientGUI_support.R_Cam1Sel')
    print("CamVar1.get():{}".format(CamVar1.get()))
    sys.stdout.flush()


def R1Sel():
    global FeedVar1
    print('ClientGUI_support.R1Sel')
    print("FeedVar1.get():{}".format(FeedVar1.get()))
    sys.stdout.flush()


def R2Sel():
    global FeedVar2
    print('ClientGUI_support.R2Sel')
    print("FeedVar2.get():{}".format(FeedVar2.get()))
    sys.stdout.flush()


def R3Sel():
    global TrainingVar, Fish_trainingGUI
    print('ClientGUI_support.R3Sel')
    r_button_val = TrainingVar.get()
    print("TraningVar.get():{}".format(r_button_val))
    motor_notification = ""

    if r_button_val is 'E':
        train_type = 'Edge'
    elif r_button_val is 'C':
        train_type = 'Center'
        motor_notification = "\tmotor B will be active"

    exception_obj.info_wo_tstamp("\tSeleced traning type : {}".format(train_type))
    if motor_notification is not "":
        exception_obj.info_wo_tstamp(motor_notification)

    sys.stdout.flush()


def onLogClear():
    print('ClientGUI_support.onLogClear')
    sys.stdout.flush()
    Fish_trainingGUI.txtMainLog.delete('0.0', tk.END)


def Feed():
    print('ClientGUI_support.Feed')
    sys.stdout.flush()


def on1L():
    # global chb_Var
    # global FeedVar
    print('ClientGUI_support.on1L')

    try:
        exception_obj.info_wo_tstamp("\tTest motor - 1L")

        steps_no = Fish_trainingGUI.txtStepNum.get()
        motor = 1
        if steps_no == '':
            program = 0
            feed_obj.new_feeder_run(program, motor)
        else:
            feed_obj.move_steps(steps_no, motor)

        sys.stdout.flush()
    except TypeError:
        pass


def on1R():
    print('ClientGUI_support.on1R')
    try:
        exception_obj.info_wo_tstamp("\tTest motor - 1R")

        steps_no = Fish_trainingGUI.txtStepNum.get()
        motor = 0
        if steps_no == '':
            program = 0
            feed_obj.new_feeder_run(program, motor)
        else:
            feed_obj.move_steps(steps_no, motor)

        sys.stdout.flush()
    except TypeError:
        pass


def on2L():
    print('ClientGUI_support.on2L')
    try:
        exception_obj.info_wo_tstamp("\tTest motor - 2L")

        steps_no = Fish_trainingGUI.txtStepNum.get()
        motor = 3
        if steps_no == '':
            program = 0
            feed_obj.new_feeder_run(program, motor)
        else:
            feed_obj.move_steps(steps_no, motor)

        sys.stdout.flush()
    except TypeError:
        pass


def on2R():
    print('ClientGUI_support.on2R')
    try:
        exception_obj.info_wo_tstamp("\tTest motor - 2R")

        steps_no = Fish_trainingGUI.txtStepNum.get()
        motor = 2
        if steps_no == '':
            program = 0
            feed_obj.new_feeder_run(program, motor)
        else:
            feed_obj.move_steps(steps_no, motor)

        sys.stdout.flush()
    except TypeError:
        pass


def onExit():
    global exit_flag, Fish_trainingGUI, thread_track_fish, root
    print('ClientGUI_support.onExit')
    sys.stdout.flush()
    # exit_var = True
    # Fish_traningGUI.stop_traning = True
    print("stop_training:{}".format(Fish_trainingGUI.stop_training))
    try:
        if Fish_trainingGUI.stop_training == True:
            destroy_window()
        else:       # False
            Fish_trainingGUI.exit_flag = True
            onStopTraining()
            # Fish_trainingGUI.stop_training = True
            # thread_track_fish.join()

            while thread_track_fish.isAlive():
                root.update()
            destroy_window()
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)


def onRunTraining():
    global TrainingVar, thread_track_fish, controller
    print('ClientGUI_support.onRunTraining')
    sys.stdout.flush()

    training_stop_timed = check_auto_training_stop()

    Fish_trainingGUI.stop_training = False
    log_name = []

    camera = CamVar1.get()
    tracking_obj = Tracking(exception_obj, Fish_trainingGUI.max_training_time, camera)
    no_of_training = len(tracking_obj.fish)
    check_fish_no_and_tday(no_of_training)
    fish_no1 = Fish_trainingGUI.txtFishNo1.get('0.0', 'end-1c')
    training_day1 = Fish_trainingGUI.txtTrainingDay1.get('0.0', 'end-1c')
    fish_no2 = Fish_trainingGUI.txtFishNo2.get('0.0', 'end-1c')
    training_day2 = Fish_trainingGUI.txtTrainingDay2.get('0.0', 'end-1c')

    log_folder = Fish_trainingGUI.log_folder

    log_name.append('F{}DAY{}'.format(fish_no1, training_day1))

    if no_of_training == 2:
        log_name.append('F{}DAY{}'.format(fish_no2, training_day2))

    try:
        _tmp1 = type(controller)
        controller.__del__()
        # exception_class.info("Controller closed")
    except UnboundLocalError:
        print("there is not Controller instance")
    except NameError:
        print("name 'controller' is not defined")

    controller = Controller(tracking_obj,
                            feed_obj,
                            exception_obj,
                            log_folder,
                            log_name,
                            Fish_trainingGUI,
                            camera,
                            training_stop_timed)
    _tmp1 = type(controller)
    tracking_obj.set_controller_obj(controller)
    # print("type:{}".format(_tmp1))

    training_type = "edge" if TrainingVar.get() is 'E' else "center"
    # controller, exception_class, _log_name=['test'], _camera=0, video=None

    track_loop_args = (training_type,)
    thread_track_fish = threading.Thread(target=tracking_obj.track_loop, name="track_loop", args=track_loop_args)
    thread_track_fish.daemon = True
    thread_track_fish.start()


def check_auto_training_stop():
    global Fish_trainingGUI, chVar_stop_tr
    print('ClientGUI_support.check_auto_training_stop')
    sys.stdout.flush()

    timedelta_str = None
    if chVar_stop_tr.get() == 1:
        training_stop_str = txtTrainingStop.get()
        tr_splt_list = training_stop_str.split(":")
        # print("tr_splt_list:{}".format(tr_splt_list))
        hr_str = min_str = sec_str = ''
        with suppress(IndexError):
            if tr_splt_list[0].isnumeric():
                hr_str = int(tr_splt_list[0])
            if tr_splt_list[1].isnumeric():
                min_str = int(tr_splt_list[1])
            if tr_splt_list[2].isnumeric():
                sec_str = int(tr_splt_list[2])
        if not (hr_str == '' and min_str == '' and sec_str == ''):
            # print("TIME {}:{}:{}".format(hr_str, min_str, sec_str))
            if min_str == '': min_str = 0
            if sec_str == '': sec_str = 0
            timedelta_str = timedelta(hours=hr_str, minutes=min_str, seconds=sec_str)
            # print("timedelta_str:{}".format(timedelta_str))

    return timedelta_str


def onStopTraining():
    global Fish_trainingGUI
    print('ClientGUI_support.onStopTraining')
    sys.stdout.flush()

    # onExit()
    Fish_trainingGUI.stop_training = True
    #Fish_traningGUI.print_and_update_main_log("Stopped!")


def onSendtest():
    print('ClientGUI_support.onSendtest')
    sys.stdout.flush()
    # fish_client = FishClient()
    # fish_client.send('test', 0)
    # fish_client.kill()


def onStatClear():
    print('ClientGUI_support.onStatClear')
    sys.stdout.flush()
    # Fish_trainingGUI.txtStatLog.delete('0.0', END)


def onTankConfig():
    global CamVar1, exception_obj

    print('ClientGUI_support.onTankConfig')
    sys.stdout.flush()
    relvant_camera = CamVar1.get()
    scene_planner = ScenePlanner(exception_obj)
    scene_planner.SP_Main(relvant_camera)


def onSetZero():
    print('ClientGUI_support.onSetZero')
    btn_txt = Fish_trainingGUI.btnSetZero['text']
    if btn_txt == "Set ZERO pos.":
        Fish_trainingGUI.btnSetZero.configure(text='END')
        feed_obj.Arduino.disable_pins(True, -1)
    else:
        Fish_trainingGUI.btnSetZero.configure(text='Set ZERO pos.')
        feed_obj.Arduino.disable_pins(False, -1)


def onShowDBFile():
    global Fish_trainingGUI
    print('ClientGUI_support.onShowDBFile')
    sys.stdout.flush()

    show_file(Fish_trainingGUI.db_file_full_path())


def onShowConfigFile():
    global Fish_trainingGUI
    print('ClientGUI_support.onShowConfigFile')
    sys.stdout.flush()

    show_file(Fish_trainingGUI.config_file_full_path())


def onOpenFolder():
    global Fish_trainingGUI
    print('ClientGUI_support.onOpenFolder')
    sys.stdout.flush()
    open_folder(Fish_trainingGUI.LogFolderName)


def OnRefresh():
    global Fish_trainingGUI
    print('ClientGUI_support.OnRefresh')
    sys.stdout.flush()
    Fish_trainingGUI.db_tree_view_data_refresh()


def OnChkStopTraining():
    global chVar_stop_tr, Fish_trainingGUI
    print('ClientGUI_support.OnChkStopTraining')
    sys.stdout.flush()
    if chVar_stop_tr.get() == 1:
        Fish_trainingGUI.txtTrainingStop.configure(state="normal")
        Fish_trainingGUI.txtTrainingStop.focus()
    else:
        Fish_trainingGUI.txtTrainingStop.configure(state="disabled")


def init(top, gui, _exception_class,  *args, **kwargs):
    global Fish_trainingGUI, top_level, root, exception_obj, feed_obj
    Fish_trainingGUI = gui
    top_level = top
    root = top
    exception_obj = _exception_class
    feed_obj = TrackerFeeder()
    arduino_obj = feed_obj.Arduino

    # HERE - find how is calling to arduino.main()
    # than add disable pins on start and stop
    
    if arduino_obj.connection == 'NO':
        exception_obj.error("No Arduino conn. check serial port (USB)", bold=True)
    else:
        exception_obj.info("Arduino connection OK, port:{}".format(arduino_obj.serial_con.serial.port))


def destroy_window():
    global top_level, thread_track_fish, controller, root
    # Function which closes the window.
    print("Quiting.")
    root.destroy()


def show_file(path):
    if platform.system() == "Windows":
        str_db_file = "explorer /select,\"{}\"".format(str(path))
        subprocess.Popen(str_db_file)
    elif platform.system() == "Darwin":
        subprocess.Popen(["open", "-R", path])
    else:
        subprocess.Popen(["xdg-open", path])


def open_folder(path):
    try:
        if platform.system() == "Windows":
            os.startfile(path)
        elif platform.system() == "Darwin":
            subprocess.Popen(["open", path])
        else:
            subprocess.Popen(["xdg-open", path])
    except FileNotFoundError:
        exception_obj.error("cannot find the folder")


def check_fish_no_and_tday(_no_of_training):
    fish_no = Fish_trainingGUI.txtFishNo1.get('0.0', 'end-1c')
    training_day = Fish_trainingGUI.txtTrainingDay1.get('0.0', 'end-1c')
    if fish_no is '' or training_day is '':
        exception_obj.info("Fish no1. or Training day textbox were empty, filling automatically")
    if fish_no is '':
        Fish_trainingGUI.txtFishNo1.insert('0.0', 'test1')
    if training_day is '':
        Fish_trainingGUI.txtTrainingDay1.insert('0.0', '0')

    if _no_of_training == 2:
        fish_no = Fish_trainingGUI.txtFishNo2.get('0.0', 'end-1c')
        training_day = Fish_trainingGUI.txtTrainingDay2.get('0.0', 'end-1c')
        if fish_no is '' or training_day is '':
            exception_obj.info("Fish no2. or Training day textbox were empty, filling automatically")
        if fish_no is '':
            Fish_trainingGUI.txtFishNo2.insert('0.0', 'test2')
        if training_day is '':
            Fish_trainingGUI.txtTrainingDay2.insert('0.0', '0')


if __name__ == '__main__':
    import ClientGUI
    ClientGUI.vp_start_gui()





